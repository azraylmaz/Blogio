@page "/blog/{id:guid}"
@inject NavigationManager Nav
@using C = Blogio.Blog
@using Microsoft.AspNetCore.Components.Authorization
@using System.Threading
@inject C.IBlogAppService AppSvc

<PageTitle>Blog Post</PageTitle>

@if (post is null)
{
    <div>Loading...</div>
}
else
{
    <Row Class="g-3">
        <!-- SOL -->
        <Column md="12" lg="9" xl="10" xxl="10" Style="flex:0 0 70%;max-width:70%;">
            <Card>
                <CardHeader>
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="flex-grow-1">
                            <div class="d-flex align-items-center gap-2">
                                <h4 class="mb-0">@post.Title</h4>
                                @if (latestVersion is not null)
                                {
                                    <span class="badge rounded-pill text-secondary">
                                        *edited @Ago(latestVersion.CreationTime)
                                    </span>
                                }

                                @if (!post.IsPublished)
                                {
                                    <Badge Color="Color.Secondary">Draft</Badge>
                                }
                            </div>
                            <div class="mt-2 d-flex flex-wrap gap-1 text-muted">
                                @if (post.BlogPostTags?.Count > 0)
                                {
                                    @foreach (var t in post.BlogPostTags)
                                    {
                                        <a href="@($"/blog?tagId={t.Id}")"
                                           class="badge rounded-pill text-secondary border me-1"
                                           style="text-decoration:none;"
                                           @onclick:stopPropagation="true">#@t.Name</a>
                                    }
                                }
                            </div>
                        </div>
                        <AuthorizeView Roles="admin, author">
                            <Authorized>
                                <Badge Color="@(post.IsPublished? Color.Success: Color.Secondary)">
                                    @(post.IsPublished ? "Published" : "Draft")
                                </Badge>
                            </Authorized>
                        </AuthorizeView>
                    </div>
                </CardHeader>

                <CardBody>
                    <div class="blog-content" style="line-height:1.7">
                        @((MarkupString)(post?.Content ?? string.Empty))
                    </div>
                </CardBody>
            </Card>

            <!-- Latest version preview -->
            @if (latestVersion is not null)
            {
                <Card class="mt-3">
                    <CardHeader>
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="fw-semibold">Previous version (#@latestVersion.Version)</div>
                            <div class="text-muted small">@latestVersion.CreationTime.ToLocalTime().ToString("g")</div>
                        </div>
                    </CardHeader>
                    <CardBody>
                        <div class="text-muted" style="line-height:1.7">
                            @((MarkupString) ShortenHtml(latestVersion.Content, 400))
                        </div>
                        <div class="mt-2">
                            <Button Size="Size.Small" Color="Color.Light" Clicked="@OpenVersionModal">
                                Read full
                            </Button>
                            <AuthorizeView Roles="admin, author">
                                <Authorized>
                                    @if (_canEditThis)
                                    {
                                        <Button Size="Size.Small" Color="Color.Warning" Class="ms-2" Clicked="@RevertLatest">
                                            Revert to this
                                        </Button>
                                    }
                                </Authorized>
                            </AuthorizeView>
                        </div>
                    </CardBody>
                </Card>
            }
        </Column>

        <!-- SAĞ -->
        <Column md="12" lg="3" xl="2" xxl="2">
            <Card class="shadow-sm" style="position: sticky; top: 1rem;">
                <CardHeader>
                    <div class="d-flex justify-content-between align-items-start w-100">
                        <div class="d-flex align-items-end gap-2">
                            <Button Size="Size.Small"
                                    Color="@(likedByMe ? Color.Dark : Color.Success)"
                                    Clicked="@(likedByMe ? (() => Unlike(post.Id)) : (() => Like(post.Id)))">
                                <Icon Name="IconName.ThumbsUp" class="me-1" />
                                @(likedByMe ? $"Unlike ({post!.LikeCount})" : $"Like ({post!.LikeCount})")
                            </Button>

                            <AuthorizeView Roles="admin, author">
                                <Authorized>
                                    @if (_canEditThis)
                                    {
                                        <Button Size="Size.Small" Color="Color.Info" Clicked="OpenDraftEdit">
                                            <Icon Name="IconName.Edit" class="me-1" /> Edit (draft)
                                        </Button>
                                        <Button Size="Size.Small" Color="Color.Danger" Clicked="OpenDeleteConfirm">
                                            <Icon Name="IconName.Delete" class="me-1" /> Delete
                                        </Button>
                                    }
                                </Authorized>
                            </AuthorizeView>
                        </div>
                    </div>
                </CardHeader>

                <CardBody>
                    <!-- comments -->
                    <div class="mb-3 d-flex">
                        <TextEdit Class="flex-grow-1" @bind-Text="newComment" Placeholder="Write a Comment..." />
                        <Button Size="Size.Small" Color="Color.Primary" Class="ms-2" Clicked="@AddComment">Add</Button>
                    </div>

                    @if (comments.Count == 0)
                    {
                        <div class="text-muted">No Comments.</div>
                    }
                    else
                    {
                        <ListGroup>
                            @foreach (var c in comments)
                            {
                                <ListGroupItem>
                                    <div class="d-flex justify-content-between">
                                        <div>
                                            <div>@c.Text</div>
                                            <div class="small text-muted">
                                                @if (!string.IsNullOrWhiteSpace(c.CreatorUserName))
                                                {
                                                    @c.CreatorUserName
                                                }
                                                @if (c.CreationTime != default)
                                                {
                                                    <text> · @c.CreationTime.ToLocalTime().ToString("g")</text>
                                                }
                                            </div>
                                        </div>
                                        <AuthorizeView Roles="admin">
                                            <Authorized>
                                                <Button Size="Size.Small" Color="Color.Light" Clicked="() => DeleteComment(c.Id)">
                                                    Delete
                                                </Button>
                                            </Authorized>
                                        </AuthorizeView>
                                    </div>
                                </ListGroupItem>
                            }
                        </ListGroup>
                    }
                </CardBody>
            </Card>
        </Column>
    </Row>

    <!-- DRAFT EDIT MODAL -->
    <Modal @bind-Visible="draftVisible" Size="ModalSize.Default" Centered="true" Scrollable="true" Backdrop="true" Class="p-2">
        <ModalBody Class="p-4">
            <div class="mx-auto my-3" style="max-width:860px;">
                <Card Class="shadow-lg rounded-4 border-0" Style="background:#f0f0f0; color:#212529;">
                    <CardHeader class="bg-transparent border-0 pt-4 pb-0">
                        <span class="fw-semibold fs-5">Edit Draft</span>
                    </CardHeader>
                    <br />
                    <CardBody class="pb-2">
                        <div class="row g-3">
                            <div class="col-12 px-4">
                                <Field>
                                    <FieldLabel>Title</FieldLabel>
                                    <TextEdit @bind-Text="draftForm.Title" Placeholder="Title..." />
                                </Field>
                            </div>

                            <div class="col-12 px-4">
                                <Field>
                                    <FieldLabel>Content</FieldLabel>
                                    <RichTextEdit @ref="richte"
                                                  @bind-HTML="draftForm.Content"
                                                  @key="editingId"
                                                  Placeholder="Content..." Style="height:360px"
                                                  Class="form-control bg-white border-0">
                                        <RichTextEditToolbar />
                                        <RichTextEditContent />
                                    </RichTextEdit>
                                </Field>
                            </div>

                            <div class="col-12 col-md-6 px-4">
                                <Field>
                                    <FieldLabel>Tags</FieldLabel>
                                    <Select TValue="Guid" Multiple="true"
                                            SelectedValues="@selectedDraftTagIds"
                                            SelectedValuesChanged="OnDraftTagsChanged"
                                            Class="form-select bg-white border-0">
                                        @foreach (var t in tags)
                                        {
                                            <SelectItem Value="@t.Id">@t.Name</SelectItem>
                                        }
                                    </Select>
                                </Field>
                            </div>
                        </div>
                    </CardBody>

                    <CardFooter class="bg-transparent border-0 d-flex justify-content-end gap-2 px-4 pb-3">
                        <Button Color="Color.Secondary" Outline Clicked="() => draftVisible = false">Cancel</Button>
                        <Button Color="Color.Light" Clicked="SaveDraft">Save draft</Button>
                        <Button Color="Color.Primary" Clicked="PublishFromDraft">Publish changes</Button>
                    </CardFooter>
                </Card>
            </div>
        </ModalBody>
    </Modal>

    <!-- VERSION PREVIEW MODAL -->
    <Modal @bind-Visible="versionVisible" Size="ModalSize.Large" Centered="true" Backdrop="true" Scrollable="true" Class="p-2">
        <ModalBody class="p-3">
            <div class="mx-auto my-3" style="max-width: 860px;">
                 <Card Class="shadow-lg rounded-4 border-0 row g-3" Style="background:#f3f3f3; color:#212529;">
                    @if (latestVersion is not null)
                    {
                        <h5 class="mb-2">Version #@latestVersion.Version</h5>
                        <div class="text-muted small mb-3">@latestVersion.CreationTime.ToLocalTime().ToString("f")</div>
                        <div style="line-height:1.7">@((MarkupString)latestVersion.Content)</div>
                    }
                </Card>
            </div>
        </ModalBody>
    </Modal>

    <!-- DELETE MODAL (mevcut) -->
    <Modal @bind-Visible="deleteVisible" Size="ModalSize.Default" Centered="true" Backdrop="true" Scrollable="true" Class="p-2">
        <ModalBody class="p-3">
            <div class="mx-auto my-3" style="max-width: 860px;">
                <Card Class="shadow-lg rounded-4 border-0 row g-3" Style="background:#f3f3f3; color:#212529;">
                    <div class="pt-2 px-4">
                        <div class="fw-semibold mb-2">Delete post?</div>
                        <div>Are you sure you want to delete <span class="fw-semibold">"@post?.Title"</span>?</div>
                        @if (!string.IsNullOrWhiteSpace(deleteError))
                        {
                            <div class="text-danger mt-2">@deleteError</div>
                        }
                    </div>
                    <CardFooter class="bg-transparent border-0 d-flex justify-content-end gap-2 px-4 pb-3">
                        <Button Color="Color.Secondary" Outline Clicked="() => deleteVisible = false" Disabled="@deleting">Cancel</Button>
                        <Button Color="Color.Danger" Clicked="ConfirmDelete" Disabled="@deleting">Delete</Button>
                    </CardFooter>
                </Card>
            </div>
        </ModalBody>
    </Modal>
}

@code {
    [Parameter] public Guid id { get; set; }

    private C.BlogPostDto? post;
    private List<C.CommentDto> comments = new();
    private string newComment = "";

    private C.AuthorDto? author;
    private List<C.TagDto> tags = new();

    private bool isAuthenticated;
    private bool likedByMe;
    private bool _canEditThis;
    private Guid? _myId;
    private bool _isAdmin;
    private bool _isAuthor;

    private C.BlogPostVersionDto? latestVersion;

    // draft state
    private bool draftVisible;
    private C.CreateUpdateBlogPostDraftDto draftForm = new();
    private IReadOnlyList<Guid> selectedDraftTagIds = Array.Empty<Guid>();
    private RichTextEdit? richte;
    private Guid editingId = Guid.NewGuid();

    // delete
    private bool deleteVisible;
    private bool deleting;
    private string? deleteError;

    // — relative time state —
    private DateTime _nowUtc = DateTime.UtcNow;
    private System.Threading.PeriodicTimer? _agoTimer;
    private readonly CancellationTokenSource _agoCts = new();

    [CascadingParameter] private Task<AuthenticationState> AuthTask { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        var auth = await AuthTask;
        var user = auth.User;

        isAuthenticated = user.Identity?.IsAuthenticated == true;
        _isAdmin = user.IsInRole("admin");
        _isAuthor = user.IsInRole("author");
        _myId = TryGetUserId(user);

        if (id == Guid.Empty) return;

        post = await AppSvc.GetAsync(id);
        if (post is null) return;

        _canEditThis = _isAdmin || (_isAuthor && _myId.HasValue && post.AuthorId == _myId.Value);
        if (!post.IsPublished && !_canEditThis)
        {
            Nav.NavigateTo("/blog");
            return;
        }

        try { likedByMe = await AppSvc.IsLikedByMeAsync(id); } catch { likedByMe = false; }

        var clist = await AppSvc.GetCommentsAsync(id);
        comments = clist.Items?.ToList() ?? new();

        tags = (await AppSvc.GetAllTagsAsync()).Items?.ToList() ?? new();

        // load latest version preview
        var vers = await AppSvc.GetVersionsAsync(id, 1);
        latestVersion = vers.Items?.FirstOrDefault();
    }

    private static Guid? TryGetUserId(System.Security.Claims.ClaimsPrincipal user)
    {
        var s = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value
              ?? user.FindFirst("sub")?.Value;
        return Guid.TryParse(s, out var g) ? g : (Guid?)null;
    }

    private string TimeAgo(DateTime dtUtc)
    {
        var dt = dtUtc.ToLocalTime();
        var span = DateTime.Now - dt;
        if (span.TotalSeconds < 60) return $"{(int)span.TotalSeconds}s ago";
        if (span.TotalMinutes < 60) return $"{(int)span.TotalMinutes}m ago";
        if (span.TotalHours < 24) return $"{(int)span.TotalHours}h ago";
        return $"{(int)span.TotalDays}d ago";
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        // ilk 60 saniye her saniye tazele, sonra dakikada bir
        _ = Task.Run(async () =>
        {
            var tickEvery = TimeSpan.FromSeconds(1);
            _agoTimer = new System.Threading.PeriodicTimer(tickEvery);
            var ticks = 0;

            try
            {
                while (await _agoTimer.WaitForNextTickAsync(_agoCts.Token))
                {
                    _nowUtc = DateTime.UtcNow;
                    await InvokeAsync(StateHasChanged);

                    if (++ticks == 60) // 1 dk sonra daha seyrek güncelle
                    {
                        _agoTimer.Dispose();
                        _agoTimer = new System.Threading.PeriodicTimer(TimeSpan.FromMinutes(1));
                        ticks = 0;
                    }
                }
            }
            catch (OperationCanceledException) { /* ignore */ }
        });
    }

    public void Dispose()
    {
        _agoCts.Cancel();
        _agoTimer?.Dispose();
    }

    private static string Ago(DateTime createdUtc)
    {
        var local = createdUtc.Kind switch
        {
            DateTimeKind.Utc => createdUtc.ToLocalTime(),
            DateTimeKind.Local => createdUtc,
            _ => DateTime.SpecifyKind(createdUtc, DateTimeKind.Local)
        };

        var diff = DateTime.Now - local;
        if (diff < TimeSpan.Zero) diff = TimeSpan.Zero;

        if (diff.TotalSeconds < 5) return "just now";
        if (diff.TotalSeconds < 60) return $"{(int)diff.TotalSeconds}s ago";
        if (diff.TotalMinutes < 60) return $"{(int)diff.TotalMinutes}m ago";
        if (diff.TotalHours < 24) return $"{(int)diff.TotalHours}h ago";
        return $"{(int)diff.TotalDays}d ago";
    }
    private static string ShortenHtml(string html, int maxChars)
    {
        if (string.IsNullOrEmpty(html)) return string.Empty;
        var s = new string(html.Take(maxChars).ToArray());
        if (html.Length > maxChars) s += "...";
        return s;
    }

    // likes
    private async Task Like(Guid id)
    {
        if (!isAuthenticated)
        {
            var ret = Uri.EscapeDataString(Nav.ToBaseRelativePath(Nav.Uri));
            Nav.NavigateTo($"/Account/Login?returnUrl=/{ret}", forceLoad: true);
            return;
        }
        try
        {
            post!.LikeCount = await AppSvc.LikeAsync(id);
            likedByMe = true;
            StateHasChanged();
        }
        catch { }
    }

    private async Task Unlike(Guid id)
    {
        if (!isAuthenticated)
        {
            var ret = Uri.EscapeDataString(Nav.ToBaseRelativePath(Nav.Uri));
            Nav.NavigateTo($"/Account/Login?returnUrl=/{ret}", forceLoad: true);
            return;
        }
        try
        {
            post!.LikeCount = await AppSvc.UnlikeAsync(id);
            likedByMe = false;
            StateHasChanged();
        }
        catch { }
    }

    // comments
    private async Task AddComment()
    {
        if (post is null || string.IsNullOrWhiteSpace(newComment)) return;
        if (!isAuthenticated)
        {
            var ret = Uri.EscapeDataString(Nav.ToBaseRelativePath(Nav.Uri));
            Nav.NavigateTo($"/Account/Login?returnUrl=/{ret}", true);
            return;
        }

        await AppSvc.AddCommentAsync(new C.CreateUpdateCommentDto { BlogPostId = post.Id, Text = newComment });
        var list = await AppSvc.GetCommentsAsync(post.Id);
        comments = list.Items?.ToList() ?? new();
        newComment = "";
        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteComment(Guid cid)
    {
        if (post is null) return;
        await AppSvc.DeleteCommentAsync(cid);
        var list = await AppSvc.GetCommentsAsync(post.Id);
        comments = list.Items?.ToList() ?? new();
        await InvokeAsync(StateHasChanged);
    }

    // draft edit flow
    private async Task OpenDraftEdit()
    {
        if (post is null) return;

        // 1) mevcut taslak var mı?
        var existing = await AppSvc.GetDraftAsync(post.Id);

        if (existing is not null)
        {
            draftForm = new C.CreateUpdateBlogPostDraftDto
            {
                BlogPostId = post.Id,
                Title = existing.Title,
                Content = existing.Content,
                TagIds = existing.Tags?.Select(t => t.Id).ToList() ?? new List<Guid>()
            };
        }
        else
        {
            // yoksa yayındaki içerikle başlat
            draftForm = new C.CreateUpdateBlogPostDraftDto
            {
                BlogPostId = post.Id,
                Title = post.Title,
                Content = post.Content,
                TagIds = post.BlogPostTags?.Select(t => t.Id).ToList() ?? new List<Guid>()
            };
        }

        selectedDraftTagIds = draftForm.TagIds;
        editingId = Guid.NewGuid();

        draftVisible = true;
        await InvokeAsync(StateHasChanged);

        await Task.Yield();
        if (richte is not null)
            await richte.SetHtmlAsync(draftForm.Content ?? string.Empty);
    }

    private Task OnDraftTagsChanged(IReadOnlyList<Guid> values)
    {
        selectedDraftTagIds = values ?? Array.Empty<Guid>();
        draftForm.TagIds = selectedDraftTagIds.ToList();
        return Task.CompletedTask;
    }

    private async Task SaveDraft()
    {
        if (post is null) return;
        if (richte is not null)
            draftForm.Content = await richte.GetHtmlAsync();

        draftForm.TagIds = selectedDraftTagIds.ToList();
        var saved = await AppSvc.UpsertDraftAsync(draftForm);

        // formu geri doldur (özellikle tag listesi için)
        draftForm.Title = saved.Title;
        draftForm.Content = saved.Content;
        selectedDraftTagIds = saved.Tags?.Select(t => t.Id).ToList() ?? new List<Guid>();
    }

    private async Task PublishFromDraft()
    {
        if (post is null) return;
        await SaveDraft();                 // önce taslağı kaydet
        await AppSvc.PublishDraftAsync(post.Id);

        // postu ve son sürümü yenile
        post = await AppSvc.GetAsync(post.Id);
        var vers = await AppSvc.GetVersionsAsync(post.Id, 1);
        latestVersion = vers.Items?.FirstOrDefault();

        draftVisible = false;
        StateHasChanged();
    }

    // version preview / revert
    private bool versionVisible;
    private void OpenVersionModal() => versionVisible = true;

    private async Task RevertLatest()
    {
        if (latestVersion is null) return;
        await AppSvc.RevertToVersionAsync(latestVersion.Id);

        post = await AppSvc.GetAsync(id);
        var vers = await AppSvc.GetVersionsAsync(id, 1);
        latestVersion = vers.Items?.FirstOrDefault();

        StateHasChanged();
    }

    // delete flow (mevcut kodunla aynı ancak kısaltıldı)
    private Task OpenDeleteConfirm() { deleteError = null; deleteVisible = true; return Task.CompletedTask; }

    private async Task ConfirmDelete()
    {
        if (post is null) return;
        await AppSvc.DeleteAsync(post.Id);
        post = null;
        comments.Clear();
        Nav.NavigateTo("/blog", forceLoad: true);
    }
}
