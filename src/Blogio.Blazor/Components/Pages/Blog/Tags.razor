@page "/tags"
@using C = Blogio.Blog
@inject C.IBlogAppService AppSvc

<PageTitle>Etiketler</PageTitle>

<Card>
    <CardBody>
        <div class="d-flex gap-2 mb-3">
            <TextEdit @bind-Text="newTag" Placeholder="Etiket adı..." />
            <Button Color="Color.Primary" Clicked="@Add">Ekle</Button>
        </div>

        <DataGrid TItem="C.TagDto" Data="@tags" ShowPager="false" Responsive="true">
            <DataGridColumns>
                <DataGridColumn TItem="C.TagDto" Field="@nameof(C.TagDto.Name)" Caption="Ad" />
                <DataGridCommandColumn TItem="C.TagDto">
                    <DisplayTemplate Context="row">
                        <Button Size="Size.Small" Color="Color.Primary" Clicked="() => Edit(row)">Düzenle</Button>
                        <Button Size="Size.Small" Color="Color.Danger" Class="ms-1" Clicked="() => Delete(row.Id)">Sil</Button>
                    </DisplayTemplate>
                </DataGridCommandColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<Modal @bind-Visible="editVisible">
    <ModalHeader>Etiketi Düzenle</ModalHeader>
    <ModalBody>
        <TextEdit @bind-Text="editName" />
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Secondary" Clicked="() => editVisible = false">Vazgeç</Button>
        <Button Color="Color.Primary" Clicked="@Save">Kaydet</Button>
    </ModalFooter>
</Modal>

@code {
    private List<C.TagDto> tags = new();
    private string newTag = string.Empty;

    private bool editVisible;
    private Guid editId;
    private string editName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var res = await AppSvc.GetAllTagsAsync();
        tags = res.Items?.ToList() ?? new();
    }

    private async Task Add()
    {
        var name = (newTag ?? string.Empty).Trim();
        if (string.IsNullOrWhiteSpace(name)) return;

        // aynı isimli tag varsa tekrar oluşturma
        if (tags.Any(t => string.Equals(t.Name, name, StringComparison.OrdinalIgnoreCase)))
        {
            newTag = string.Empty;
            return;
        }

        var created = await AppSvc.CreateTagAsync(new C.CreateUpdateTagDto { Name = name });
        tags.Add(created);
        newTag = string.Empty;
    }

    private void Edit(C.TagDto t)
    {
        editId = t.Id;
        editName = t.Name;
        editVisible = true;
    }

    private async Task Save()
    {
        var name = (editName ?? string.Empty).Trim();
        if (string.IsNullOrWhiteSpace(name)) return;

        var updated = await AppSvc.UpdateTagAsync(editId, new C.CreateUpdateTagDto { Name = name });
        var idx = tags.FindIndex(x => x.Id == editId);
        if (idx >= 0) tags[idx] = updated;
        editVisible = false;
    }

    private async Task Delete(Guid id)
    {
        await AppSvc.DeleteTagAsync(id);
        tags = tags.Where(x => x.Id != id).ToList();
    }
}
