@page "/blog"
@inject NavigationManager Nav
@using C = Blogio.Blog
@inject C.IBlogAppService AppSvc
@using AuthorModel = Blogio.Blog.AuthorDto
@using Microsoft.AspNetCore.Components.Authorization
@using Blazorise.DataGrid

<PageTitle>Blog Posts</PageTitle>

<!-- ÜST: Arama barı (full width) -->
<Row Class="mb-3">
    <Column>
        <InputGroup Size="Size.Large">
            <TextEdit @bind-Text="searchText"
                  Immediate="true"
                  Placeholder="Title/Content..."
                  @onkeydown="OnSearchKeyDown" />
        <InputGroupAppend>
    <Button Color="Color.Primary" Clicked="TriggerSearch">
        <Icon Name="IconName.Search" class="me-1" /> Search
    </Button>
</InputGroupAppend>
        </InputGroup>
    </Column>
</Row>

<Row>
    <Column md="12" lg="9" xl="10" xxl="10" Style="flex: 0 0 80%; max-width: 80%;">
        <DataGrid TItem="C.BlogPostListItemDto"
                  @ref="grid"
                  Data="@items"
                  TotalItems="@total"
                  ReadData="@OnReadData"
                  ShowPager="true"
                  PageSize="pageSize"
                  Responsive="true"
                  ShowCaptions="true"
                  Editable="false">
            <DataGridColumns>
                <DataGridColumn TItem="C.BlogPostListItemDto"
                                Field="@nameof(C.BlogPostListItemDto.Title)"
                                Caption="Title">
                    <DisplayTemplate Context="row">
                        <a href="@($"/blog/{row.Id}")"
                           class="text-decoration-none text-reset fw-semibold"
                           @onclick:stopPropagation="true">
                            @row.Title
                        </a>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="C.BlogPostListItemDto" Field="@nameof(C.BlogPostListItemDto.CommentCount)" Caption="Comment" />
                <DataGridColumn TItem="C.BlogPostListItemDto" Field="@nameof(C.BlogPostListItemDto.LikeCount)" Caption="Like" />
                
                <AuthorizeView Roles="admin,author">
                    <Authorized>
                        <DataGridColumn TItem="C.BlogPostListItemDto" Field="@nameof(C.BlogPostListItemDto.IsPublished)" Caption="Published">
                            <DisplayTemplate Context="row">
                                @if (row.IsPublished)
                                {
                                    <Badge Color="Color.Success">Yes</Badge>
                                }
                                else
                                {
                                    <Badge Color="Color.Secondary">No</Badge>
                                }
                            </DisplayTemplate>
                        </DataGridColumn>
                    </Authorized>
                    </AuthorizeView>

                <DataGridCommandColumn TItem="C.BlogPostListItemDto">
                    <DisplayTemplate Context="row">
                        <Button Size="Size.Small" Color="Color.Light" Clicked="() => GoDetails(row.Id)">Details</Button>
                        <Button Size="Size.Small" Color="Color.Primary" Class="ms-1" Clicked="() => Edit(row.Id)">Edit</Button>
                        @if (row.IsPublished)
                        {
                            <Button Size="Size.Small" Color="Color.Dark" Class="ms-1" Clicked="() => Unpublish(row.Id)">Hide</Button>
                        }
                        else
                        {
                            <Button Size="Size.Small" Color="Color.Success" Class="ms-1" Clicked="() => Publish(row.Id)">Publish</Button>
                        }
                        <Button Size="Size.Small" Color="Color.Warning" Class="ms-1" Clicked="() => Like(row.Id)">👍</Button>
                        <Button Size="Size.Small" Color="Color.Danger" Class="ms-1" Clicked="() => Delete(row.Id)">Delete</Button>
                    </DisplayTemplate>
                </DataGridCommandColumn>
            </DataGridColumns>
        </DataGrid>
    </Column>

    <Column md="12" lg="3" xl="2" xxl="2">
        <Card Class="shadow-sm" Style="position: sticky; top: 1rem;">
            <CardHeader>
                <div class="d-flex align-items-center gap-2">
                    <Icon Name="IconName.Filter" /> <span class="fw-semibold">Filters</span>
                </div>
            </CardHeader>
            <CardBody>
                <AuthorizeView Roles="admin, author">
                    <Authorized>
                        <Field>
                            <FieldLabel>Published</FieldLabel>
                            <Switch Checked="@publishedOnly"
                                    CheckedChanged="@(async (bool v) => { publishedOnly = v; await Search(); })"
                                    CheckedText="Only Published"
                                    UncheckedText="All" />
                        </Field>
                    </Authorized>
                </AuthorizeView>
                <Field Class="mt-2">
                    <FieldLabel>Tag</FieldLabel>
                    <Select TValue="Guid?"
                            SelectedValue="@selectedTagId"
                            SelectedValueChanged="OnTagFilterChanged">
                        <SelectItem Value="@((Guid?)null)">— All —</SelectItem>
                        @foreach (var t in tags)
                        {
                            <SelectItem Value="@t.Id">@t.Name</SelectItem>
                        }
                    </Select>
                </Field>

                <Field Class="mt-2">
                    <FieldLabel>Author</FieldLabel>
                    <Select TValue="Guid?"
                            SelectedValue="@selectedAuthorId"
                            SelectedValueChanged="OnAuthorFilterChanged">
                        <SelectItem Value="@((Guid?)null)">— All —</SelectItem>
                        @foreach (var a in authors)
                        {
                            <SelectItem Value="@a.Id">@DisplayAuthorName(a)</SelectItem>
                        }
                    </Select>
                </Field>

                <Divider Class="my-3" />
                <Button Color="Color.Secondary" Outline Clicked="ClearFilters">Clear</Button>

                <AuthorizeView Roles="admin,author">
                    <Authorized>
                        <Button Color="Color.Success" Class="ms-2" Clicked="CreateNew">New Blog Post</Button>
                    </Authorized>
                </AuthorizeView>

            </CardBody>
        </Card>
    </Column>
</Row>

<!------------ MODAL (New Blog Post) ------------>
<AuthorizeView Roles="admin, author">
    <Authorized>
        <Modal @bind-Visible="editVisible"
               Size="ModalSize.Default"
               Centered="true"
               Scrollable="true"
               Backdrop="true"
               Class="p-2">

            <ModalBody Class="p-4">
                <div class="mx-auto my-3" style="max-width: 860px;">
                    <Card Class="shadow-lg rounded-4 border-0" Style="background:#f3f3f3; color:#212529;">
                        <CardHeader Class="bg-transparent border-0 pt-4 pb-0">
                            <div class="d-flex align-items-center gap-2">
                                <span class="fw-semibold fs-4">
                                    @(editingId == null ? "New Blog Post" : "Edit Post")
                                </span>
                            </div>
                        </CardHeader>

                        <CardBody Class="pb-2">
                            <div class="row g-3">
                                <div class="col-12 px-4">
                                    <Field>
                                        <FieldLabel>Title</FieldLabel>
                                        <Validation Validator="@ValidateTitle">
                                            <TextEdit @bind-Text="form.Title" Placeholder="Title..."
                                                      Class="form-control form-control-lg bg-white border-0" />
                                        </Validation>
                                    </Field>
                                </div>

                                <div class="col-12 px-4">
                                    <Field>
                                        <FieldLabel>Content</FieldLabel>
                                        <Validation Validator="@ValidateContent">
                                            <RichTextEdit @bind-HTML="form.Content" Rows="8" Placeholder="Content..."
                                                      Class="form-control bg-white border-0" Style="height: 360px"/>
                                                      <RichTextEditToolbar />
                                                      <RichTextEditContent />
                                        </Validation>
                                    </Field>
                                </div>

                                <div class="col-12 col-md-6 px-4">
                                    <br />
                                    <Field>
                                        <FieldLabel>Author</FieldLabel>
                                        @if (_isAdmin)
                                        {
                                            <Validation Validator="@ValidateAuthorRequired">
                                                <Select TValue="Guid?" @bind-SelectedValue="selectedAuthorIdInForm"
                                                        Class="form-select bg-white border-0">
                                                    <SelectItem Value="@((Guid?)null)">— Choose Author —</SelectItem>
                                                    @foreach (var a in authors)
                                                    {
                                                        <SelectItem Value="@a.Id">@DisplayAuthorName(a)</SelectItem>
                                                    }
                                                </Select>
                                            </Validation>
                                        }
                                        else
                                        {
                                            <TextEdit ReadOnly="true" Plaintext="true"
                                                      Text="@(_myAuthorDisplay ?? "—")" />
                                        }
                                    </Field>
                                </div>

                                <div class="col-12 col-md-6 px-4">
                                    <br />
                                    <Field>
                                        <FieldLabel>Tags</FieldLabel>

                                        <!-- Var olan tag’lerden çoklu seçim -->
                                        <Select TValue="Guid" Multiple="true"
                                                SelectedValues="@selectedTagIds"
                                                SelectedValuesChanged="OnSelectedTagsChanged"
                                                Class="form-select bg-white border-0">
                                            @foreach (var t in tags)
                                            {
                                                <SelectItem Value="@t.Id">@t.Name</SelectItem>
                                            }
                                        </Select>

                                        <!-- Listede yoksa yeni tag ekleme -->
                                        <div class="d-flex align-items-center gap-2 mt-2">
                                            <TextEdit @bind-Text="newTagName" Placeholder="New tag..." />
                                            <Button Size="Size.Small" Color="Color.Success" Clicked="AddNewTag">Add</Button>
                                        </div>
                                        <div class="form-text text-secondary mt-1">
                                            For multiple: hold Ctrl / ⌘
                                        </div>
                                    </Field>
                                </div>

                                <div class="col-12 px-4">
                                    <Field>
                                        <FieldLabel>Publish</FieldLabel>
                                        <Switch @bind-Checked="isPublishedSwitch"
                                                CheckedText="Publish"
                                                UncheckedText="Draft"
                                                Color="Color.Success" />
                                    </Field>
                                </div>
                            </div>
                        </CardBody>

                        <CardFooter Class="bg-transparent border-0 d-flex justify-content-end gap-2 px-4 pb-4">
                            <Button Color="Color.Secondary" Outline Clicked="() => editVisible = false">Cancel</Button>
                            <Button Color="Color.Primary" Clicked="@Save">Save</Button>
                        </CardFooter>
                    </Card>
                </div>
            </ModalBody>
        </Modal>
    </Authorized>
</AuthorizeView>

@code {
    private readonly int pageSize = 10;
    private int total;


    private List<C.BlogPostListItemDto> items = new();
    private List<C.TagDto> tags = new();
    private List<AuthorModel> authors = new();

    private C.GetBlogPostListDto filter = new();
    private bool publishedOnly;
    private Guid? selectedTagId;

    // edit modal state
    private bool editVisible;
    private Guid? editingId;
    private C.CreateUpdateBlogPostDto form = new();
    private bool isPublishedSwitch;
    private Validations? formValidations;

    private string newTagName = string.Empty;

    private bool _isAdmin, _isAuthor;
    private Guid? _myId;
    private string? _myAuthorDisplay;   // modalda okunacak ad

    private string searchText = string.Empty;

    private async Task TriggerSearch()
    {
        filter.Filter = (searchText ?? string.Empty).Trim();
        await Search();              // grid.CurrentPage=1 + Reload
    }

    private async Task OnSearchKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await TriggerSearch();
    }

    private static Guid? TryGetUserId(System.Security.Claims.ClaimsPrincipal user)
    {
        var s = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value
              ?? user.FindFirst("sub")?.Value;
        return Guid.TryParse(s, out var g) ? g : (Guid?)null;
    }


    private Guid? selectedAuthorIdInForm; // modal yazar seçimi
    private static string DisplayAuthorName(AuthorModel a)
        => !string.IsNullOrWhiteSpace(a.Name) ? $"{a.Name} {a.Surname}" : a.UserName;

    private void ValidateTitle(ValidatorEventArgs e)
    {
        var v = e.Value?.ToString();
        e.Status = !string.IsNullOrWhiteSpace(v) ? ValidationStatus.Success : ValidationStatus.Error;
        if (e.Status == ValidationStatus.Error) e.ErrorText = "Başlık zorunlu";
    }
    private void ValidateContent(ValidatorEventArgs e)
    {
        var v = e.Value?.ToString();
        e.Status = !string.IsNullOrWhiteSpace(v) ? ValidationStatus.Success : ValidationStatus.Error;
        if (e.Status == ValidationStatus.Error) e.ErrorText = "İçerik zorunlu";
    }
    private void ValidateAuthorRequired(ValidatorEventArgs e)
    {
        e.Status = (selectedAuthorIdInForm.HasValue && selectedAuthorIdInForm.Value != Guid.Empty)
            ? ValidationStatus.Success : ValidationStatus.Error;
        if (e.Status == ValidationStatus.Error) e.ErrorText = "Yazar seçin";
    }

    // Etiket seçimi
    private IReadOnlyList<Guid> selectedTagIds = Array.Empty<Guid>();
    private Task OnSelectedTagsChanged(IReadOnlyList<Guid> values)
    {
        selectedTagIds = values ?? Array.Empty<Guid>();
        form.TagIds = selectedTagIds.ToList();
        return Task.CompletedTask;
    }

    private Guid? selectedAuthorId;
    [Parameter][SupplyParameterFromQuery] public Guid? authorId { get; set; }
    [Parameter][SupplyParameterFromQuery] public Guid? tagId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        // query’den gelen tagId’yi uygula
        if (tagId != selectedTagId)
        {
            selectedTagId = tagId;
            await Search();             // grid.CurrentPage = 1 + Reload()
        }

        // (Vardı) query’den gelen authorId’yi uygula
        if (authorId != selectedAuthorId)
        {
            selectedAuthorId = authorId;
            await Search();
        }
    }

    [CascadingParameter] private Task<AuthenticationState> AuthTask { get; set; } = default!;
    private bool _canManage; // admin/author?

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthTask;
        var user = auth.User;

        _isAdmin = user.IsInRole("admin");
        _isAuthor = user.IsInRole("author");
        _myId = TryGetUserId(user);

        // normal kullanıcılar için her zaman published
        if (!(_isAdmin || _isAuthor)) publishedOnly = true;

        tags = (await AppSvc.GetAllTagsAsync()).Items?.ToList() ?? new();
        authors = (await AppSvc.GetAuthorsAsync()).Items?.ToList() ?? new();

        // kendi görünen adın (modalda plaintext göstereceğiz)
        _myAuthorDisplay = authors.FirstOrDefault(a => a.Id == _myId) is var me && me != null
            ? (!string.IsNullOrWhiteSpace(me.Name) ? $"{me.Name} {me.Surname}" : me.UserName)
            : null;

        if (authorId.HasValue)
            selectedAuthorId = authorId;
    }

    private async Task OnReadData(DataGridReadDataEventArgs<C.BlogPostListItemDto> e)
    {
        var page = e.Page <= 0 ? 1 : e.Page;
        var size = e.PageSize > 0 ? e.PageSize : pageSize;

        var req = new C.GetBlogPostListDto
        {
            SkipCount = (page - 1) * size,
            MaxResultCount = size,
            Filter = filter.Filter,
            IsPublished = (_isAdmin || _isAuthor)
                        ? (publishedOnly ? true : (bool?)null)  // admin/author “All” => null
                        : true,
            AuthorId = selectedAuthorId,
            TagIds = selectedTagId is Guid g ? new List<Guid> { g } : null,
            Sorting = "CreationTime desc"
        };

        var result = await AppSvc.GetListAsync(req);
        items = result.Items?.ToList() ?? new();
        total = (int)result.TotalCount;
    }

    private void CreateNew()
    {
        editingId = null;
        form = new C.CreateUpdateBlogPostDto { Title = "", Content = "", TagIds = new() };
        if (_isAdmin)
        {
            selectedAuthorIdInForm = null;   // admin istediğini seçsin
        }
        else
        {
            // author ise kendisi sabit
            selectedAuthorIdInForm = _myId;
            form.AuthorId = _myId ?? Guid.Empty;
        }
        isPublishedSwitch = false;
        editVisible = true;
    }

    private async Task LoadToForm(Guid id)
    {
        var dto = await AppSvc.GetAsync(id);
        if (dto is null) return;

        editingId = id;
        form = new C.CreateUpdateBlogPostDto
        {
            Title = dto.Title,
            Content = dto.Content,
            TagIds = dto.BlogPostTags.Select(t => t.Id).ToList(),
            IsPublished = dto.IsPublished,
            AuthorId = dto.AuthorId
        };

        selectedTagIds = form.TagIds;            // <— modal çoklu seçimi doldur
        selectedAuthorIdInForm = dto.AuthorId;
        isPublishedSwitch = dto.IsPublished;
        editVisible = true;
    }

    private async Task Save()
    {
        if (formValidations is not null && !await formValidations.ValidateAll()) return;
        if (!selectedAuthorIdInForm.HasValue) return;

        form.AuthorId = selectedAuthorIdInForm.Value;
        form.IsPublished = isPublishedSwitch;

        if (editingId is null)
            await AppSvc.CreateAsync(form);
        else
            await AppSvc.UpdateAsync(editingId.Value, form);

        editVisible = false;
        await Search();
    }

    private async Task Delete(Guid id)
    {
        await AppSvc.DeleteAsync(id);
        await Search();
    }

    private async Task Publish(Guid id)
    {
        await AppSvc.PublishAsync(id);
        await Search();
    }

    private async Task Unpublish(Guid id)
    {
        await AppSvc.UnpublishAsync(id);
        await Search();
    }

    private async Task Like(Guid id)
    {
        await AppSvc.LikeAsync(id);
        await Search();
    }

    private void GoDetails(Guid id) => Nav.NavigateTo($"/blog/{id}");

    private async Task AddNewTag()
    {
        var name = (newTagName ?? string.Empty).Trim();
        if (string.IsNullOrWhiteSpace(name))
            return;

        // 1) Varsa tekrar oluşturma, sadece seçili listeye ekle
        var existing = tags.FirstOrDefault(t =>
            string.Equals(t.Name, name, StringComparison.OrdinalIgnoreCase));

        if (existing != null)
        {
            if (!selectedTagIds.Contains(existing.Id))
                selectedTagIds = selectedTagIds.Concat(new[] { existing.Id }).ToArray();

            form.TagIds = selectedTagIds.ToList();
            newTagName = string.Empty;
            return;
        }

        // 2) Yoksa servisle oluştur
        var created = await AppSvc.CreateTagAsync(new C.CreateUpdateTagDto { Name = name });

        // listeyi ve seçili değerleri güncelle
        tags.Add(created);
        selectedTagIds = selectedTagIds.Concat(new[] { created.Id }).ToArray();
        form.TagIds = selectedTagIds.ToList();

        newTagName = string.Empty;
    }


    private DataGrid<C.BlogPostListItemDto>? grid;

    private async Task Search()
    {
        if (grid is null) return;
        grid.CurrentPage = 1;          // <-- önemli
        await grid.Reload();
    }

    private async Task OnTagFilterChanged(Guid? v)
    {
        selectedTagId = v;
        await Search();
    }

    private async Task OnAuthorFilterChanged(Guid? v)
    {
        selectedAuthorId = v;
        await Search();
    }

    private async Task ClearFilters()
    {
        publishedOnly = false;
        selectedTagId = null;
        selectedAuthorId = null;
        filter.Filter = string.Empty;
        await Search();                 // <-- await
    }

    private Task Edit(Guid id) => LoadToForm(id);
}
